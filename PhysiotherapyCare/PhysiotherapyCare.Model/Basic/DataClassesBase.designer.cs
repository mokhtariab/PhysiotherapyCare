#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhysiotherapyCare.Model.Basic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PhysiotherapyCare")]
	public partial class DataClassesBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTBL_Bank(TBL_Bank instance);
    partial void UpdateTBL_Bank(TBL_Bank instance);
    partial void DeleteTBL_Bank(TBL_Bank instance);
    partial void InsertTBL_DoctorType(TBL_DoctorType instance);
    partial void UpdateTBL_DoctorType(TBL_DoctorType instance);
    partial void DeleteTBL_DoctorType(TBL_DoctorType instance);
    partial void InsertTBL_InjuryType(TBL_InjuryType instance);
    partial void UpdateTBL_InjuryType(TBL_InjuryType instance);
    partial void DeleteTBL_InjuryType(TBL_InjuryType instance);
    partial void InsertTBL_KinShip(TBL_KinShip instance);
    partial void UpdateTBL_KinShip(TBL_KinShip instance);
    partial void DeleteTBL_KinShip(TBL_KinShip instance);
    partial void InsertTBL_LocationPart(TBL_LocationPart instance);
    partial void UpdateTBL_LocationPart(TBL_LocationPart instance);
    partial void DeleteTBL_LocationPart(TBL_LocationPart instance);
    partial void InsertTBL_PatientType(TBL_PatientType instance);
    partial void UpdateTBL_PatientType(TBL_PatientType instance);
    partial void DeleteTBL_PatientType(TBL_PatientType instance);
    partial void InsertTBL_PaymentStatus(TBL_PaymentStatus instance);
    partial void UpdateTBL_PaymentStatus(TBL_PaymentStatus instance);
    partial void DeleteTBL_PaymentStatus(TBL_PaymentStatus instance);
    partial void InsertTBL_PaymentType(TBL_PaymentType instance);
    partial void UpdateTBL_PaymentType(TBL_PaymentType instance);
    partial void DeleteTBL_PaymentType(TBL_PaymentType instance);
    partial void InsertTBL_VisitStatus(TBL_VisitStatus instance);
    partial void UpdateTBL_VisitStatus(TBL_VisitStatus instance);
    partial void DeleteTBL_VisitStatus(TBL_VisitStatus instance);
    partial void InsertTBL_InjuryTypePatient(TBL_InjuryTypePatient instance);
    partial void UpdateTBL_InjuryTypePatient(TBL_InjuryTypePatient instance);
    partial void DeleteTBL_InjuryTypePatient(TBL_InjuryTypePatient instance);
    partial void InsertTBL_LocationPartDoctor(TBL_LocationPartDoctor instance);
    partial void UpdateTBL_LocationPartDoctor(TBL_LocationPartDoctor instance);
    partial void DeleteTBL_LocationPartDoctor(TBL_LocationPartDoctor instance);
    partial void InsertTBL_PatientTypeGroup(TBL_PatientTypeGroup instance);
    partial void UpdateTBL_PatientTypeGroup(TBL_PatientTypeGroup instance);
    partial void DeleteTBL_PatientTypeGroup(TBL_PatientTypeGroup instance);
    partial void InsertTBL_NODuplicateForm(TBL_NODuplicateForm instance);
    partial void UpdateTBL_NODuplicateForm(TBL_NODuplicateForm instance);
    partial void DeleteTBL_NODuplicateForm(TBL_NODuplicateForm instance);
    #endregion
		
		public DataClassesBaseDataContext() : 
				base(global::PhysiotherapyCare.Model.Properties.Settings.Default.PhysiotherapyCareConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TBL_Bank> TBL_Banks
		{
			get
			{
				return this.GetTable<TBL_Bank>();
			}
		}
		
		public System.Data.Linq.Table<TBL_DoctorType> TBL_DoctorTypes
		{
			get
			{
				return this.GetTable<TBL_DoctorType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_InjuryType> TBL_InjuryTypes
		{
			get
			{
				return this.GetTable<TBL_InjuryType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_KinShip> TBL_KinShips
		{
			get
			{
				return this.GetTable<TBL_KinShip>();
			}
		}
		
		public System.Data.Linq.Table<TBL_LocationPart> TBL_LocationParts
		{
			get
			{
				return this.GetTable<TBL_LocationPart>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PatientType> TBL_PatientTypes
		{
			get
			{
				return this.GetTable<TBL_PatientType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PaymentStatus> TBL_PaymentStatus
		{
			get
			{
				return this.GetTable<TBL_PaymentStatus>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PaymentType> TBL_PaymentTypes
		{
			get
			{
				return this.GetTable<TBL_PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_VisitStatus> TBL_VisitStatus
		{
			get
			{
				return this.GetTable<TBL_VisitStatus>();
			}
		}
		
		public System.Data.Linq.Table<TBL_InjuryTypePatient> TBL_InjuryTypePatients
		{
			get
			{
				return this.GetTable<TBL_InjuryTypePatient>();
			}
		}
		
		public System.Data.Linq.Table<TBL_LocationPartDoctor> TBL_LocationPartDoctors
		{
			get
			{
				return this.GetTable<TBL_LocationPartDoctor>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PatientTypeGroup> TBL_PatientTypeGroups
		{
			get
			{
				return this.GetTable<TBL_PatientTypeGroup>();
			}
		}
		
		public System.Data.Linq.Table<VW_Bank> VW_Banks
		{
			get
			{
				return this.GetTable<VW_Bank>();
			}
		}
		
		public System.Data.Linq.Table<VW_DoctorType> VW_DoctorTypes
		{
			get
			{
				return this.GetTable<VW_DoctorType>();
			}
		}
		
		public System.Data.Linq.Table<VW_InjuryType> VW_InjuryTypes
		{
			get
			{
				return this.GetTable<VW_InjuryType>();
			}
		}
		
		public System.Data.Linq.Table<VW_KinShip> VW_KinShips
		{
			get
			{
				return this.GetTable<VW_KinShip>();
			}
		}
		
		public System.Data.Linq.Table<VW_LocationPart> VW_LocationParts
		{
			get
			{
				return this.GetTable<VW_LocationPart>();
			}
		}
		
		public System.Data.Linq.Table<VW_PatientType> VW_PatientTypes
		{
			get
			{
				return this.GetTable<VW_PatientType>();
			}
		}
		
		public System.Data.Linq.Table<VW_PaymentStatus> VW_PaymentStatus
		{
			get
			{
				return this.GetTable<VW_PaymentStatus>();
			}
		}
		
		public System.Data.Linq.Table<VW_PaymentType> VW_PaymentTypes
		{
			get
			{
				return this.GetTable<VW_PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<VW_VisitStatus> VW_VisitStatus
		{
			get
			{
				return this.GetTable<VW_VisitStatus>();
			}
		}
		
		public System.Data.Linq.Table<VW_InjuryTypePatient> VW_InjuryTypePatients
		{
			get
			{
				return this.GetTable<VW_InjuryTypePatient>();
			}
		}
		
		public System.Data.Linq.Table<VW_LocationPartDoctor> VW_LocationPartDoctors
		{
			get
			{
				return this.GetTable<VW_LocationPartDoctor>();
			}
		}
		
		public System.Data.Linq.Table<VW_PatientTypeGroup> VW_PatientTypeGroups
		{
			get
			{
				return this.GetTable<VW_PatientTypeGroup>();
			}
		}
		
		public System.Data.Linq.Table<VW_StateSickness> VW_StateSicknesses
		{
			get
			{
				return this.GetTable<VW_StateSickness>();
			}
		}
		
		public System.Data.Linq.Table<TBL_NODuplicateForm> TBL_NODuplicateForms
		{
			get
			{
				return this.GetTable<TBL_NODuplicateForm>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_BankDelete")]
		public int SP_BankDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_BankInsert")]
		public int SP_BankInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_BankUpdate")]
		public int SP_BankUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_DoctorTypeDelete")]
		public int SP_DoctorTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_DoctorTypeInsert")]
		public int SP_DoctorTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_DoctorTypeUpdate")]
		public int SP_DoctorTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_InjuryTypeDelete")]
		public int SP_InjuryTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_InjuryTypeInsert")]
		public int SP_InjuryTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_InjuryTypeUpdate")]
		public int SP_InjuryTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_KinShipDelete")]
		public int SP_KinShipDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_KinShipInsert")]
		public int SP_KinShipInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_KinShipUpdate")]
		public int SP_KinShipUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_LocationPartDelete")]
		public int SP_LocationPartDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_LocationPartInsert")]
		public int SP_LocationPartInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_LocationPartUpdate")]
		public int SP_LocationPartUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PatientTypeDelete")]
		public int SP_PatientTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PatientTypeInsert")]
		public int SP_PatientTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PatientTypeUpdate")]
		public int SP_PatientTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentStatusDelete")]
		public int SP_PaymentStatusDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentStatusInsert")]
		public int SP_PaymentStatusInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentStatusUpdate")]
		public int SP_PaymentStatusUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentTypeDelete")]
		public int SP_PaymentTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentTypeInsert")]
		public int SP_PaymentTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_PaymentTypeUpdate")]
		public int SP_PaymentTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_VisitStatusDelete")]
		public int SP_VisitStatusDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_VisitStatusInsert")]
		public int SP_VisitStatusInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] ref System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			id = ((System.Nullable<short>)(result.GetParameterValue(0)));
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_VisitStatusUpdate")]
		public int SP_VisitStatusUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TitleName", DbType="VarChar(50)")] string titleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, titleName, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_InjuryTypePatientDelete")]
		public int SP_InjuryTypePatientDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InjuryType_Id", DbType="SmallInt")] System.Nullable<short> injuryType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), injuryType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_InjuryTypePatientDeleteWithPatientId")]
		public int SP_InjuryTypePatientDeleteWithPatientId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_InjuryTypePatientInsert")]
		public int SP_InjuryTypePatientInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InjuryType_Id", DbType="SmallInt")] System.Nullable<short> injuryType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), injuryType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_InjuryTypePatientUpdate")]
		public int SP_InjuryTypePatientUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InjuryType_Id", DbType="SmallInt")] System.Nullable<short> injuryType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), injuryType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationPartDoctorsDelete")]
		public int SP_LocationPartDoctorsDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationPart_Id", DbType="SmallInt")] System.Nullable<short> locationPart_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doctors_Id", DbType="Int")] System.Nullable<int> doctors_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), locationPart_Id, doctors_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationPartDoctorsDeleteWithDoctor_Id")]
		public int SP_LocationPartDoctorsDeleteWithDoctor_Id([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doctors_Id", DbType="Int")] System.Nullable<int> doctors_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), doctors_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationPartDoctorsInsert")]
		public int SP_LocationPartDoctorsInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationPart_Id", DbType="SmallInt")] System.Nullable<short> locationPart_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doctors_Id", DbType="Int")] System.Nullable<int> doctors_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), locationPart_Id, doctors_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationPartDoctorsUpdate")]
		public int SP_LocationPartDoctorsUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationPart_Id", DbType="SmallInt")] System.Nullable<short> locationPart_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doctors_Id", DbType="Int")] System.Nullable<int> doctors_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), locationPart_Id, doctors_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PatientTypeGroupDelete")]
		public int SP_PatientTypeGroupDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientType_Id", DbType="SmallInt")] System.Nullable<short> patientType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PatientTypeGroupInsert")]
		public int SP_PatientTypeGroupInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientType_Id", DbType="SmallInt")] System.Nullable<short> patientType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PatientTypeGroupUpdate")]
		public int SP_PatientTypeGroupUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientType_Id", DbType="SmallInt")] System.Nullable<short> patientType_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientType_Id, patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PatientTypeGroupDeleteWithPatientId")]
		public int SP_PatientTypeGroupDeleteWithPatientId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Patient_Id", DbType="Int")] System.Nullable<int> patient_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patient_Id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_NODuplicateFormDelete")]
		public int SP_NODuplicateFormDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FormName", DbType="VarChar(100)")] string formName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="VarChar(100)")] string id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), formName, id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Base.SP_NODuplicateFormInsert")]
		public int SP_NODuplicateFormInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FormName", DbType="VarChar(100)")] string formName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="VarChar(100)")] string id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), formName, id, msgRet);
			msgRet = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckNODuplicateForm", IsComposable=true)]
		public System.Nullable<bool> CheckNODuplicateForm([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FormName", DbType="VarChar(100)")] string formName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="VarChar(100)")] string id)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), formName, id).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_Bank")]
	public partial class TBL_Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_Bank()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_DoctorType")]
	public partial class TBL_DoctorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_DoctorType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_InjuryType")]
	public partial class TBL_InjuryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
		private EntitySet<TBL_InjuryTypePatient> _TBL_InjuryTypePatients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_InjuryType()
		{
			this._TBL_InjuryTypePatients = new EntitySet<TBL_InjuryTypePatient>(new Action<TBL_InjuryTypePatient>(this.attach_TBL_InjuryTypePatients), new Action<TBL_InjuryTypePatient>(this.detach_TBL_InjuryTypePatients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBL_InjuryType_TBL_InjuryTypePatient", Storage="_TBL_InjuryTypePatients", ThisKey="Id", OtherKey="InjuryType_Id")]
		public EntitySet<TBL_InjuryTypePatient> TBL_InjuryTypePatients
		{
			get
			{
				return this._TBL_InjuryTypePatients;
			}
			set
			{
				this._TBL_InjuryTypePatients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBL_InjuryTypePatients(TBL_InjuryTypePatient entity)
		{
			this.SendPropertyChanging();
			entity.TBL_InjuryType = this;
		}
		
		private void detach_TBL_InjuryTypePatients(TBL_InjuryTypePatient entity)
		{
			this.SendPropertyChanging();
			entity.TBL_InjuryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_KinShip")]
	public partial class TBL_KinShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_KinShip()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_LocationPart")]
	public partial class TBL_LocationPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_LocationPart()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_PatientType")]
	public partial class TBL_PatientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
		private EntitySet<TBL_PatientTypeGroup> _TBL_PatientTypeGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_PatientType()
		{
			this._TBL_PatientTypeGroups = new EntitySet<TBL_PatientTypeGroup>(new Action<TBL_PatientTypeGroup>(this.attach_TBL_PatientTypeGroups), new Action<TBL_PatientTypeGroup>(this.detach_TBL_PatientTypeGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBL_PatientType_TBL_PatientTypeGroup", Storage="_TBL_PatientTypeGroups", ThisKey="Id", OtherKey="PatientType_Id")]
		public EntitySet<TBL_PatientTypeGroup> TBL_PatientTypeGroups
		{
			get
			{
				return this._TBL_PatientTypeGroups;
			}
			set
			{
				this._TBL_PatientTypeGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBL_PatientTypeGroups(TBL_PatientTypeGroup entity)
		{
			this.SendPropertyChanging();
			entity.TBL_PatientType = this;
		}
		
		private void detach_TBL_PatientTypeGroups(TBL_PatientTypeGroup entity)
		{
			this.SendPropertyChanging();
			entity.TBL_PatientType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_PaymentStatus")]
	public partial class TBL_PaymentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_PaymentStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_PaymentType")]
	public partial class TBL_PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_PaymentType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_VisitStatus")]
	public partial class TBL_VisitStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TitleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public TBL_VisitStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_InjuryTypePatient")]
	public partial class TBL_InjuryTypePatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InjuryType_Id;
		
		private int _Patient_Id;
		
		private EntityRef<TBL_InjuryType> _TBL_InjuryType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInjuryType_IdChanging(short value);
    partial void OnInjuryType_IdChanged();
    partial void OnPatient_IdChanging(int value);
    partial void OnPatient_IdChanged();
    #endregion
		
		public TBL_InjuryTypePatient()
		{
			this._TBL_InjuryType = default(EntityRef<TBL_InjuryType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InjuryType_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InjuryType_Id
		{
			get
			{
				return this._InjuryType_Id;
			}
			set
			{
				if ((this._InjuryType_Id != value))
				{
					if (this._TBL_InjuryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInjuryType_IdChanging(value);
					this.SendPropertyChanging();
					this._InjuryType_Id = value;
					this.SendPropertyChanged("InjuryType_Id");
					this.OnInjuryType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					this.OnPatient_IdChanging(value);
					this.SendPropertyChanging();
					this._Patient_Id = value;
					this.SendPropertyChanged("Patient_Id");
					this.OnPatient_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBL_InjuryType_TBL_InjuryTypePatient", Storage="_TBL_InjuryType", ThisKey="InjuryType_Id", OtherKey="Id", IsForeignKey=true)]
		public TBL_InjuryType TBL_InjuryType
		{
			get
			{
				return this._TBL_InjuryType.Entity;
			}
			set
			{
				TBL_InjuryType previousValue = this._TBL_InjuryType.Entity;
				if (((previousValue != value) 
							|| (this._TBL_InjuryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBL_InjuryType.Entity = null;
						previousValue.TBL_InjuryTypePatients.Remove(this);
					}
					this._TBL_InjuryType.Entity = value;
					if ((value != null))
					{
						value.TBL_InjuryTypePatients.Add(this);
						this._InjuryType_Id = value.Id;
					}
					else
					{
						this._InjuryType_Id = default(short);
					}
					this.SendPropertyChanged("TBL_InjuryType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_LocationPartDoctors")]
	public partial class TBL_LocationPartDoctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _LocationPart_Id;
		
		private int _Doctors_Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationPart_IdChanging(short value);
    partial void OnLocationPart_IdChanged();
    partial void OnDoctors_IdChanging(int value);
    partial void OnDoctors_IdChanged();
    #endregion
		
		public TBL_LocationPartDoctor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationPart_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short LocationPart_Id
		{
			get
			{
				return this._LocationPart_Id;
			}
			set
			{
				if ((this._LocationPart_Id != value))
				{
					this.OnLocationPart_IdChanging(value);
					this.SendPropertyChanging();
					this._LocationPart_Id = value;
					this.SendPropertyChanged("LocationPart_Id");
					this.OnLocationPart_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctors_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Doctors_Id
		{
			get
			{
				return this._Doctors_Id;
			}
			set
			{
				if ((this._Doctors_Id != value))
				{
					this.OnDoctors_IdChanging(value);
					this.SendPropertyChanging();
					this._Doctors_Id = value;
					this.SendPropertyChanged("Doctors_Id");
					this.OnDoctors_IdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_PatientTypeGroup")]
	public partial class TBL_PatientTypeGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PatientType_Id;
		
		private int _Patient_Id;
		
		private EntityRef<TBL_PatientType> _TBL_PatientType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientType_IdChanging(short value);
    partial void OnPatientType_IdChanged();
    partial void OnPatient_IdChanging(int value);
    partial void OnPatient_IdChanged();
    #endregion
		
		public TBL_PatientTypeGroup()
		{
			this._TBL_PatientType = default(EntityRef<TBL_PatientType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PatientType_Id
		{
			get
			{
				return this._PatientType_Id;
			}
			set
			{
				if ((this._PatientType_Id != value))
				{
					if (this._TBL_PatientType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientType_IdChanging(value);
					this.SendPropertyChanging();
					this._PatientType_Id = value;
					this.SendPropertyChanged("PatientType_Id");
					this.OnPatientType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					this.OnPatient_IdChanging(value);
					this.SendPropertyChanging();
					this._Patient_Id = value;
					this.SendPropertyChanged("Patient_Id");
					this.OnPatient_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBL_PatientType_TBL_PatientTypeGroup", Storage="_TBL_PatientType", ThisKey="PatientType_Id", OtherKey="Id", IsForeignKey=true)]
		public TBL_PatientType TBL_PatientType
		{
			get
			{
				return this._TBL_PatientType.Entity;
			}
			set
			{
				TBL_PatientType previousValue = this._TBL_PatientType.Entity;
				if (((previousValue != value) 
							|| (this._TBL_PatientType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBL_PatientType.Entity = null;
						previousValue.TBL_PatientTypeGroups.Remove(this);
					}
					this._TBL_PatientType.Entity = value;
					if ((value != null))
					{
						value.TBL_PatientTypeGroups.Add(this);
						this._PatientType_Id = value.Id;
					}
					else
					{
						this._PatientType_Id = default(short);
					}
					this.SendPropertyChanged("TBL_PatientType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_Bank")]
	public partial class VW_Bank
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_Bank()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_DoctorType")]
	public partial class VW_DoctorType
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_DoctorType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_InjuryType")]
	public partial class VW_InjuryType
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_InjuryType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_KinShip")]
	public partial class VW_KinShip
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_KinShip()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_LocationPart")]
	public partial class VW_LocationPart
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_LocationPart()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_PatientType")]
	public partial class VW_PatientType
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_PatientType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_PaymentStatus")]
	public partial class VW_PaymentStatus
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_PaymentStatus()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_PaymentType")]
	public partial class VW_PaymentType
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_PaymentType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.VW_VisitStatus")]
	public partial class VW_VisitStatus
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_VisitStatus()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VW_InjuryTypePatient")]
	public partial class VW_InjuryTypePatient
	{
		
		private short _InjuryType_Id;
		
		private int _Patient_Id;
		
		public VW_InjuryTypePatient()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InjuryType_Id", DbType="SmallInt NOT NULL")]
		public short InjuryType_Id
		{
			get
			{
				return this._InjuryType_Id;
			}
			set
			{
				if ((this._InjuryType_Id != value))
				{
					this._InjuryType_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="Int NOT NULL")]
		public int Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					this._Patient_Id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VW_LocationPartDoctors")]
	public partial class VW_LocationPartDoctor
	{
		
		private short _LocationPart_Id;
		
		private int _Doctors_Id;
		
		public VW_LocationPartDoctor()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationPart_Id", DbType="SmallInt NOT NULL")]
		public short LocationPart_Id
		{
			get
			{
				return this._LocationPart_Id;
			}
			set
			{
				if ((this._LocationPart_Id != value))
				{
					this._LocationPart_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctors_Id", DbType="Int NOT NULL")]
		public int Doctors_Id
		{
			get
			{
				return this._Doctors_Id;
			}
			set
			{
				if ((this._Doctors_Id != value))
				{
					this._Doctors_Id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VW_PatientTypeGroup")]
	public partial class VW_PatientTypeGroup
	{
		
		private short _PatientType_Id;
		
		private int _Patient_Id;
		
		public VW_PatientTypeGroup()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType_Id", DbType="SmallInt NOT NULL")]
		public short PatientType_Id
		{
			get
			{
				return this._PatientType_Id;
			}
			set
			{
				if ((this._PatientType_Id != value))
				{
					this._PatientType_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="Int NOT NULL")]
		public int Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					this._Patient_Id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VW_StateSickness")]
	public partial class VW_StateSickness
	{
		
		private short _Id;
		
		private string _TitleName;
		
		public VW_StateSickness()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="SmallInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this._TitleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Base.TBL_NODuplicateForm")]
	public partial class TBL_NODuplicateForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FormName;
		
		private string _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    #endregion
		
		public TBL_NODuplicateForm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
